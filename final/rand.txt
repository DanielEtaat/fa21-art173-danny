'const float NUM_ITERATIONS = 512.0;'+
'const float zoomSpeed = 10.0;'+
'const float width = 8.5;'+
'const vec2 center = vec2(0.0, 0.0);'+
'vec2 focus = vec2(0.0, 0.0);'+
'float inp = 0.0;'+
'vec2 f(vec2 z) {'+
'    return vec2(z.x * z.x - z.y * z.y, 2.0 * z.y * z.x) + focus;'+
'}'+
'float iter(vec2 z) {'+
'    float i;'+
'    for (i = 0.0; i < NUM_ITERATIONS; i += 1.0) {'+
'        z = f(z);'+
'        if (dot(z, z) > 4.0) break;'+
'    }'+
'    if (i >= NUM_ITERATIONS) '+
'        return 0.0;  '+
'        '+
'    // smooth out the coloring'+
'    float si = i - log2(log2(dot(z,z))) + 4.0;'+
'    float ai = smoothstep( -0.1, 0.0, 0.0);'+
'    i = mix(i, si, ai);'+
'    return i;'+
'}'+
'vec2 transformCoord(vec2 fragCoord) {'+
'    vec2 size = vec2(width, width);'+
'    vec2 uv = fragCoord/iResolution.xy;'+
'    return (uv - 0.5) * size + center;'+
'}'+
'void mainImage( out vec4 fragColor, in vec2 fragCoord )'+
'{'+
'    focus.x = cos(inp);'+
'    '+
'    vec2 c = transformCoord(fragCoord);'+
'    float i = iter(c);   '+
'    '+
'    // color calculation'+
'    vec3 colh = vec3(1.0, 1.0, 0.5 - 0.5*cos(iTime/5.0));'+
'    vec3 col = 0.5 + 0.5 * cos(1.2 + 0.25*i + colh);'+
'    fragColor = vec4(col, 1.0);'+
'}